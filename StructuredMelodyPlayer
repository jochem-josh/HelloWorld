/* This Program was made possible through the use of the JSyn sound pack.
 *
 * Copyright 2009 Phil Burk, Mobileer Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * //////////////////////////////////////////////////////////////////////////
 *
 * The purpose of this program is to randomly generate a melody adherent to the rules of
 * music theory within a given key and a given length.
 *
 * Authors: Joshua Jochem, Angela (last name) Zachariah Hunt, Jisoo Kim, and Sangjun (lastname)
 *
 * September 15, 2019
 */
package com.jsyn.examples;
import com.jsyn.JSyn;
import com.jsyn.Synthesizer;
import com.jsyn.unitgen.*;
import com.softsynth.shared.time.TimeStamp;
import java.util.Scanner;

public class StructuredMelodyPlayer {
    private Synthesizer synth;
    private UnitGenerator ugen;
    private UnitVoice voice;
    private LineOut lineOut;

    public void play() throws InterruptedException {
        synth = JSyn.createSynthesizer();  // Create a context for the synthesizer.

        synth.add(ugen = new SineOscillator()); //tone generator

        voice = (UnitVoice) ugen;

        // Add an output mixer.
        synth.add(lineOut = new LineOut());

        // Connect the oscillator to the left and right audio output.
        voice.getOutput().connect(0, lineOut.input, 0);
        voice.getOutput().connect(0, lineOut.input, 1);

        double timeNow = synth.getCurrentTime();// Get synthesizer time in seconds.
        // Advance to a near future time so we have a clean start.
        TimeStamp timeStamp = new TimeStamp(timeNow);
        // We only need to start the LineOut. It will pull data from the oscillator
        synth.startUnit(lineOut, timeStamp);
        // Schedule a note on and off.
        double freq = 200.0; // hertz
        double duration = 0.5;
        double onTime = 1.0;

        synth.start();// Start synthesizer using default stereo output at 44100 Hz.
        voice.noteOn(1, 0.5, timeStamp); //prevents synth from making noise before commanded
        Scanner scanner = new Scanner(System.in); //setting up scanner object
        double randomDouble = Math.random(); //random number generator
        int chord; // determines what chord will be played next

        System.out.println("How long do you want the song to be?"); //prompt
        int musicLength = scanner.nextInt(); //how long the song is

        System.out.println("What chord number would you like to start on?");
        System.out.println("If you don't want to choose type enter.");
        int startingChord = scanner.nextInt();
        scanner.nextLine();

        System.out.println("What key would you like to be in?");
        String keyNote = scanner.nextLine();
        double key = 0.0;

        boolean isMajor;

        if (keyNote.equals("C Major")) {
            key = 261.63;
            isMajor = true;
        } else if (keyNote.equals("C# Major") || keyNote.equals("Db Major")) {
            key = 277.18;
            isMajor = true;
        } else if (keyNote.equals("D Major")) {
            key = 293.66;
            isMajor = true;
        } else if (keyNote.equals("D# Major") || keyNote.equals("Eb Major")) {
            key = 311.13;
            isMajor = true;
        } else if (keyNote.equals("E Major")) {
            key = 329.63;
            isMajor = true;
        } else if (keyNote.equals("F Major")) {
            key = 349.23;
            isMajor = true;
        } else if (keyNote.equals("F# Major") || keyNote.equals("Gb Major")) {
            key = 369.99;
            isMajor = true;
        } else if (keyNote.equals("G Major")) {
            key = 392.0;
            isMajor = true;
        } else if (keyNote.equals("G# Major") || keyNote.equals("Ab Major")) {
            key = 415.3;
            isMajor = true;
        } else if (keyNote.equals("A Major")) {
            key = 440.0;
            isMajor = true;
        } else if (keyNote.equals("A# Major") || keyNote.equals("Bb Major")) {
            key = 466.16;
            isMajor = true;
        } else if (keyNote.equals("B Major")) {
            key = 493.88;
            isMajor = true;
        } else if (keyNote.equals("C Minor")) {
            key = 261.63;
            isMajor = false;
        } else if (keyNote.equals("C# Minor") || keyNote.equals("Db Minor")) {
            key = 277.18;
            isMajor = false;
        } else if (keyNote.equals("D Minor")) {
            key = 293.66;
            isMajor = false;
        } else if (keyNote.equals("D# Minor") || keyNote.equals("Eb Minor")) {
            key = 311.13;
            isMajor = false;
        } else if (keyNote.equals("E Minor")) {
            key = 329.63;
            isMajor = false;
        } else if (keyNote.equals("F Minor")) {
            key = 349.23;
            isMajor = false;
        } else if (keyNote.equals("F# Minor") || keyNote.equals("Gb Minor")) {
            key = 369.99;
            isMajor = false;
        } else if (keyNote.equals("G Minor")) {
            key = 392.0;
            isMajor = false;
        } else if (keyNote.equals("G# Minor") || keyNote.equals("Ab Minor")) {
            key = 415.3;
            isMajor = false;
        } else if (keyNote.equals("A Minor")) {
            key = 440.0;
            isMajor = false;
        } else if (keyNote.equals("A# Minor") || keyNote.equals("Bb Minor")) {
            key = 466.16;
            isMajor = false;
        } else if (keyNote.equals("B Minor")) {
            key = 493.88;
            isMajor = false;
        } else System.out.println("We love Canada!!!!!!!");

        System.out.println("Choose the tempo (65.0-600.0");
        double BPM = scanner.nextDouble();
        BPM = 60000 / BPM;
        long tempo = (long) BPM;

        if (startingChord == 1) chord = 1;
        else if (startingChord == 2) chord = 2;
        else if (startingChord == 3) chord = 3;
        else if (startingChord == 4) chord = 4;
        else if (startingChord == 5) chord = 5;
        else if (startingChord == 6) chord = 6;
        else if (startingChord == 7) chord = 7;

        else {
            // the following if/else statements determine what the first note will be
            if (randomDouble <= 0.13) chord = 1;
            else if (randomDouble > 0.13 && randomDouble <= 0.26) chord = 2;
            else if (randomDouble > 0.26 && randomDouble <= 0.34) chord = 3;
            else if (randomDouble > 0.34 && randomDouble <= 0.54) chord = 4;
            else if (randomDouble > 0.54 && randomDouble <= 0.74) chord = 5;
            else if (randomDouble > 0.74 && randomDouble <= 0.87) chord = 6;
            else chord = 7;
        }

        if (isMajor = true) 
        {
            for (int i = 0; i < musicLength; i++) {
                // this if loops ensures that the last note will always be C
                if (i == musicLength - 1) {
                    chord = 1;
                }
                switch (chord) {
                    case 1: {
                        freq = key;
                        System.out.println("C");
                        randomDouble = Math.random();
                        if (randomDouble <= 0.13) chord = 1;
                        else if (randomDouble > 0.13 && randomDouble <= 0.26) chord = 2;
                        else if (randomDouble > 0.26 && randomDouble <= 0.34) chord = 3;
                        else if (randomDouble > 0.34 && randomDouble <= 0.54) chord = 4;
                        else if (randomDouble > 0.54 && randomDouble <= 0.74) chord = 5;
                        else if (randomDouble > 0.74 && randomDouble <= 0.87) chord = 6;
                        else chord = 7;
                        if (i == musicLength - 2) //ensures proper chord progression
                        {
                            if (randomDouble <= 0.50) chord = 5;
                            else chord = 7;
                        }
                        break;
                    }
                    case 2: {
                        freq = key * 1.12;
                        System.out.println("D");
                        randomDouble = Math.random();
                        if (randomDouble <= 0.50) chord = 5;
                        else chord = 7;
                        break;
                    }
                    case 3: {
                        freq = key * 1.26;
                        System.out.println("E");
                        randomDouble = Math.random();
                        if (randomDouble <= 0.50) chord = 4;
                        else chord = 6;
                        if (i == musicLength - 3) //ensures proper chord progression
                        {
                            chord = 4;
                        }
                        break;
                    }
                    case 4: {
                        freq = key * 1.33;
                        System.out.println("F");
                        randomDouble = Math.random();
                        if (randomDouble <= 0.33) chord = 2;
                        else if (randomDouble <= 0.66) chord = 7;
                        else chord = 5;
                        if (i == musicLength - 2) //ensures proper chord progression
                        {
                            if (randomDouble <= 0.50) chord = 5;
                            else chord = 7;
                        }
                        break;
                    }
                    case 5: {
                        freq = key * 1.50;
                        System.out.println("G");
                        randomDouble = Math.random();
                        if (randomDouble <= 0.50) chord = 1;
                        else chord = 6;
                        break;
                    }
                    case 6: {
                        freq = key * 1.68;
                        System.out.println("A");
                        randomDouble = Math.random();
                        if (randomDouble <= 0.50) chord = 2;
                        else chord = 4;
                        break;
                    }
                    case 7: {
                        freq = key * 1.89;
                        System.out.println("B");
                        chord = 1;
                        break;
                    }
                    default: {
                        System.out.println("We love Canada!!!!!");
                    }
                }
                timeStamp = timeStamp.makeRelative(duration);
                voice.noteOn(freq, 0.5, timeStamp);
                Thread.sleep(tempo);
            }
        }
        
        else
        {
            for (int i = 0; i < musicLength; i++) {
                // this if loops ensures that the last note will always be C
                if (i == musicLength - 1) {
                    chord = 1;
                }
                switch (chord) {
                    case 6: {
                        freq = key;
                        System.out.println("C");
                        randomDouble = Math.random();
                        if (randomDouble <= 0.13) chord = 1;
                        else if (randomDouble > 0.13 && randomDouble <= 0.26) chord = 2;
                        else if (randomDouble > 0.26 && randomDouble <= 0.34) chord = 3;
                        else if (randomDouble > 0.34 && randomDouble <= 0.54) chord = 4;
                        else if (randomDouble > 0.54 && randomDouble <= 0.74) chord = 5;
                        else if (randomDouble > 0.74 && randomDouble <= 0.87) chord = 6;
                        else chord = 7;
                        if (i == musicLength - 2) //ensures proper chord progression
                        {
                            if (randomDouble <= 0.50) chord = 5;
                            else chord = 7;
                        }
                        break;
                    }
                    case 7: {
                        freq = key * 1.12;
                        System.out.println("D");
                        randomDouble = Math.random();
                        if (randomDouble <= 0.50) chord = 5;
                        else chord = 7;
                        break;
                    }
                    case 1: {
                        freq = key * 1.26;
                        System.out.println("E");
                        randomDouble = Math.random();
                        if (randomDouble <= 0.50) chord = 4;
                        else chord = 6;
                        if (i == musicLength - 3) //ensures proper chord progression
                        {
                            chord = 4;
                        }
                        break;
                    }
                    case 2: {
                        freq = key * 1.33;
                        System.out.println("F");
                        randomDouble = Math.random();
                        if (randomDouble <= 0.33) chord = 2;
                        else if (randomDouble <= 0.66) chord = 7;
                        else chord = 5;
                        if (i == musicLength - 2) //ensures proper chord progression
                        {
                            if (randomDouble <= 0.50) chord = 5;
                            else chord = 7;
                        }
                        break;
                    }
                    case 3: {
                        freq = key * 1.50;
                        System.out.println("G");
                        randomDouble = Math.random();
                        if (randomDouble <= 0.50) chord = 1;
                        else chord = 6;
                        break;
                    }
                    case 4: {
                        freq = key * 1.68;
                        System.out.println("A");
                        randomDouble = Math.random();
                        if (randomDouble <= 0.50) chord = 2;
                        else chord = 4;
                        break;
                    }
                    case 5: {
                        freq = key * 1.89;
                        System.out.println("B");
                        chord = 1;
                        break;
                    }
                    default: {
                        System.out.println("We love Canada!!!!!");
                    }
                }
                timeStamp = timeStamp.makeRelative(duration);
                voice.noteOn(freq, 0.5, timeStamp);
                Thread.sleep(tempo);
            }
            voice.noteOff(timeStamp.makeRelative(onTime));
        }
    }
    public static void main(String[] args) throws InterruptedException {
        new StructuredMelodyPlayer().play();
        System.exit(0);
    }
}
